
from owiener import attack
from sage.all import*
from Crypto.Util.number import*
import z3
import os
import gmpy2
import Crypto.Util.number as number
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP

Flag= "01b61a99ec3144e1eb15dd819185c340c7b17b38d069f5189807681d3c7a26afe1088f6b270c9cf26915d857e83de910971054fb92926adb0226325317510ddc5129a21beb6241001e638f6981cbcb3cd5a0be8168ae21d149d83fd3e9b5f9115e28ab2320a201a522d25f4e14552434835af1bb22d3f710341ed22722011c0372"
n= 597335689226045056913166505037840157078954264999700629833258496762227084400401604912493527516646939874075386574739856551056864389324619848840266776702144772354597990152158599522528018659755118263808518976172810917606196554528503935276695298154816588160752930883134894518555210481664717173645960866565960880557
e= 2634065751614482329107725637023560471652100411843894146340117230337954286149474325215157995353348215193206597222786188634557304190252766656287157923889937903

x = z3.Int("x")
s = z3.Solver()
s.add(x**2 - x*(n%e)+n==0, x>0)
assert s.check()==z3.sat

p = s.model()[x].as_long()
print(p)
assert is_prime(p)==true

q = n//p
phi = (p-1)*(q-1)
d = (1 + (e - 1) * phi) // e
key = RSA.construct((int(n), int(e), int(d)))
cipher = PKCS1_OAEP.new(key)
ciphertext = cipher.decrypt(bytes.fromhex(Flag))
print(ciphertext)
